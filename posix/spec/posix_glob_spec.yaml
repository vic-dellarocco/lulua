before:
  this_module = 'posix.glob'
  global_table = '_G'

  M = require(this_module)

specify posix.glob:
- context when required:
  - it does not touch the global table:
      expect(show_apis {added_to=global_table, by=this_module}).
         to_equal {}

- describe glob.GLOB_MARK:
  - before:
      MARK = M.GLOB_MARK

  - it is a number:
      expect(type(MARK)).to_be "number"

- describe glob:
  - before:
      glob, MARK = M.glob, M.GLOB_MARK
      chdir = require 'posix'.chdir
      chmod = require 'posix'.chmod
      mkdir = require 'posix'.mkdir
      mkdtemp = require 'posix'.mkdtemp
      origwd = require 'posix'.getcwd()

  - after:
      chdir(origwd)


  - context with bad arguments:
      badargs.diagnose(glob, "(?string, int)")

  - it returns nil and GLOB_NOMATCH if there are no matches:
      dir = mkdtemp(template)
      chdir(dir)
      globlist, err = glob("foo", 0)
      expect(err).to_be(M.GLOB_NOMATCH)
      expect(type(globlist)).to_be "nil"
      rmtmp(dir)

  - it returns a table of matches:
      dir = mkdtemp(template)
      chdir(dir)
      touch("match")
      globlist = glob("*", 0)
      expect(type(globlist)).to_be "table"
      rmtmp(dir)

  - it ignores non-readable directories:
      dir = mkdtemp(template)
      chdir(dir)
      mkdir("readable")
      mkdir("unreadable")
      touch("readable/match")
      touch("unreadable/match")
      chmod("unreadable", "a-rwx")
      globlist, err = glob("*/match", 0)
      expect(globlist).to_equal {"readable/match"}
      chmod("unreadable", "u+rwx")
      rmtmp(dir)

  - it matches files in the current directory:
      dir = mkdtemp(template)
      chdir(dir)
      touch("test.1")
      touch("test.2")
      touch("extra_file")
      globlist = glob("test.*", 0)
      expect(type(globlist)).to_be "table"
      expect(globlist).to_equal {"test.1", "test.2"}
      rmtmp(dir)

  - it matches files and directories in the current directory:
      dir = mkdtemp(template)
      chdir(dir)
      touch("test.1")
      touch("test.2")
      mkdir("foo")
      mkdir("bar")
      globlist = glob("*", 0)
      expect(type(globlist)).to_be "table"
      expect(globlist).to_equal {"bar", "foo", "test.1", "test.2"}
      rmtmp(dir)

  - it returns unmatched pattern for GLOB_NOCHECK:
      dir = mkdtemp(template)
      chdir(dir)
      globlist = glob("nomatch", M.GLOB_NOCHECK)
      expect(globlist).to_equal {"nomatch"}

  - it uses '*' as the pattern if pattern is nil:
      dir = mkdtemp(template)
      chdir(dir)
      touch("test.1")
      touch("test.2")
      mkdir("foo")
      mkdir("bar")
      globlist = glob(nil, 0)
      expect(type(globlist)).to_be "table"
      expect(globlist).to_equal {"bar", "foo", "test.1", "test.2"}
      rmtmp(dir)

  - it adds '/' to directory names if GLOB_MARK is passed:
      dir = mkdtemp(template)
      chdir(dir)
      mkdir("foo")
      mkdir("bar")
      globlist = glob(nil, MARK)
      expect(type(globlist)).to_be "table"
      expect(globlist).to_equal {"bar/", "foo/"}
      rmtmp(dir)
