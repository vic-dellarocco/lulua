before:
  this_module = 'posix.unistd'
  global_table = '_G'

  M = require(this_module)


specify posix.unistd:
- context when required:
  - it does not touch the global table:
      expect(show_apis {added_to=global_table, by=this_module}).
         to_equal {}


- before: |
    fcntl = require "posix.fcntl"
    pwd = require "posix.pwd"

    -- Assume $USER is the process owner, egid is gid and euid is uid
    ids = pwd.getpwnam(os.getenv "USER")


- describe alarm:
  - before:
      alarm = M.alarm

  - it returns zero when passed zero: |
      zero = alarm(0)
      expect(zero).to_be(0)

  - it can set and reset an alarm: |
      zero = alarm(10)
      ten = alarm(0)
      expect(ten>0).to_be(true)


- describe chown:
  - context with bad arguments:
      badargs.diagnose(M.chown, "(string, ?int|string, ?int|string)")


- describe exec:
  - context with bad arguments:
      badargs.diagnose(M.exec, "(string, table)")


- describe execp:
  - before: |
      execp = M.execp

      P_CHILD = 0

      -- redirect output to /dev/null
      function child(...)
         quietly = fcntl.open("/dev/null", bor(fcntl.O_WRONLY, fcntl.O_APPEND))
         M.dup2(quietly, 1)
         execp(...)
         expect("not reached").to_be(true)
      end

  - context with bad arguments:
      badargs.diagnose(execp, "(string, table)")

  - it overwrites the running process with a shell invocation:
      process = M.fork()
      if process == P_CHILD then
         child("date", {"+[%c]"})
      else
         p, msg, ret = require 'posix.sys.wait'.wait(process)
         expect(table.concat {msg, " ", tostring(ret)}).to_be "exited 0"
      end
  - "it sets argv[0]":


- describe ftruncate:
  - before: |
      ftruncate = M.ftruncate

      function echo(fname, s)
         local fh = io.open(fname, 'w')
         fh:write(s .. '\n')
         fh:close()
         return #s + 1
      end

      function flen(fname)
         local fh = io.open(fname, 'r')
         local r = fh:read '*a'
         fh:close()
         return #r
      end

  - context with bad arguments:
      badargs.diagnose(ftruncate, "(int, int)")

  - it truncates an open file descriptor:
      fname = os.tmpname()
      len = echo(fname, 'line 1')
      echo(fname, 'line 2')
      fd = fcntl.open(fname, bor(fcntl.O_CREAT, fcntl.O_WRONLY))
      expect(ftruncate(fd, len)).not_to_be(nil)
      M.close(fd)
      expect(flen(fname)).to_be(len)
      os.remove(fname)


- describe getegid:
  - before:
      getegid = M.getegid

  - context with bad arguments:
      badargs.diagnose(getegid, "()")

  - it returns the effective group id:
      expect(getegid()).to_be(ids.pw_gid)


- describe geteuid:
  - before:
      geteuid = M.geteuid

  - context with bad arguments:
      badargs.diagnose(geteuid, "()")

  - it returns the effective user id:
      expect(geteuid()).to_be(ids.pw_uid)


- describe getgid:
  - before:
      getgid = M.getgid

  - context with bad arguments:
      badargs.diagnose(getgid, "()")

  - it returns the group id:
      expect(getgid()).to_be(ids.pw_gid)


- describe gethostid:
  - before:
      gethostid = M.gethostid

  - context with bad arguments:
      badargs.diagnose(gethostid, "()")

  - it returns an integer:
      expect(math.floor(gethostid())).to_be(gethostid())


- describe getuid:
  - before:
      getuid = M.getuid

  - context with bad arguments:
      badargs.diagnose(getuid, "()")

  - it returns the user id:
      expect(getuid()).to_be(ids.pw_uid)


- describe getpgrp:
  - before:
      getpgrp = M.getpgrp

  - context with bad arguments:
      badargs.diagnose(getpgrp, "()")

  - it returns a positive integer:
      expect(math.floor(getpgrp())).to_be(getpgrp())
      expect(getpgrp() > 0).to_be(true)


- describe getpid:
  - before:
      getpid = M.getpid

  - context with bad arguments:
      badargs.diagnose(getpid, "()")

  - it returns the a positive integer:
      expect(math.floor(getpid())).to_be(getpid())
      expect(getpid() > 0).to_be(true)


- describe getppid:
  - before:
      getppid = M.getppid

  - context with bad arguments:
      badargs.diagnose(getppid, "()")

  - it returns a positive integer:
      expect(math.floor(getppid())).to_be(getppid())
      expect(getppid() > 0).to_be(true)
  - it does not return the process id:
      expect(getppid()).not_to_be(M.getpid())


- describe lchown:
  - context with bad arguments:
      badargs.diagnose(M.lchown, "(string, ?int|string, ?int|string)")


- describe link:
  - before:
      link = M.link

      st = require "posix.sys.stat"
      lstat = st.lstat
      S_ISREG, S_ISLNK = st.S_ISREG, st.S_ISLNK

      dir = posix.mkdtemp(template)
      touch(dir .. "/file")

  - after:
      rmtmp(dir)

  - context with bad arguments:
      badargs.diagnose(link, "(string, string, ?boolean)")

  - it creates hard link without optional param:
      st_before = lstat(dir .. "/file")
      link(dir .. "/file", dir .. "/hard")
      st_after = lstat(dir .. "/file")
      st_link = lstat(dir .. "/hard")
      expect(st_before.st_nlink + 1).to_be(st_after.st_nlink)
      expect(st_after.st_nlink).to_be(st_link.st_nlink)
      expect(S_ISREG(st_link.st_mode)).not_to_be(0)
      expect(S_ISLNK(st_link.st_mode)).to_be(0)
  - it creates hard link with optional param:
      st_before = lstat(dir .. "/file")
      link(dir .. "/file", dir .. "/hard", false)
      st_after = lstat(dir .. "/file")
      st_link = lstat(dir .. "/hard")
      expect(st_before.st_nlink + 1).to_be(st_after.st_nlink)
      expect(st_after.st_nlink).to_be(st_link.st_nlink)
      expect(S_ISREG(st_link.st_mode)).not_to_be(0)
      expect(S_ISLNK(st_link.st_mode)).to_be(0)
  - it creates soft link:
      st_before = lstat(dir .. "/file")
      link(dir .. "/file", dir .. "/soft", true)
      st_after = lstat(dir .. "/file")
      st_link = lstat(dir .. "/soft")
      expect(st_before.st_nlink).to_be(st_after.st_nlink)
      expect(S_ISREG(st_link.st_mode)).to_be(0)
      expect(S_ISLNK(st_link.st_mode)).not_to_be(0)


- describe linkat:
  - before:
      linkat = M.linkat
      link = M.link

      st = require "posix.sys.stat"
      lstat = st.lstat
      S_ISREG, S_ISLNK = st.S_ISREG, st.S_ISLNK

      AT_FDCWD, AT_SYMLINK_FOLLOW = fcntl.AT_FDCWD, fcntl.AT_SYMLINK_FOLLOW

      dir = posix.mkdtemp(template)
      touch(dir .. "/file")
      dirfd = fcntl.open(dir, fcntl.O_RDONLY)

  - after:
      M.close(dirfd)
      rmtmp(dir)

  - context with bad arguments:
      badargs.diagnose(linkat, "(int, string, int, string, int)")

  - it creates hard link using AT_FDCWD:
      st_before = lstat(dir .. "/file")
      linkat(AT_FDCWD, dir .. "/file", AT_FDCWD, dir .. "/hard", 0)
      st_after = lstat(dir .. "/file")
      st_link = lstat(dir .. "/hard")
      expect(st_before.st_nlink + 1).to_be(st_after.st_nlink)
      expect(st_after.st_nlink).to_be(st_link.st_nlink)
      expect(S_ISREG(st_link.st_mode)).not_to_be(0)
  - it creates hard link in directory specified by fd:
      st_before = lstat(dir .. "/file")
      linkat(dirfd, "file", dirfd, "hard", 0)
      st_after = lstat(dir .. "/file")
      st_link = lstat(dir .. "/hard")
      expect(st_before.st_nlink + 1).to_be(st_after.st_nlink)
      expect(st_after.st_nlink).to_be(st_link.st_nlink)
      expect(S_ISREG(st_link.st_mode)).not_to_be(0)
  - it creates hard link to file symbolic link:
      # linkat without AT_SYMLINK_FOLLOW returns ENOTSUPP on some filesystems
      link(dir .. "/file", dir .. "/soft", true)
      st_before = lstat(dir .. "/file")
      if linkat(dirfd, "soft", dirfd, "hard", 0) == 0 then
          st_after = lstat(dir .. "/file")
          st_hard = lstat(dir .. "/hard")
          st_soft = lstat(dir .. "/soft")
          expect(st_before.st_nlink).to_be(st_after.st_nlink)
          expect(st_soft.st_nlink).to_be(st_hard.st_nlink)
          expect(S_ISREG(st_hard.st_mode)).to_be(0)
          expect(S_ISLNK(st_hard.st_mode)).not_to_be(0)
      end
  - it creates hard link to file referenced by symbolic link:
      link(dir .. "/file", dir .. "/soft", true)
      st_before = lstat(dir .. "/file")
      linkat(dirfd, "soft", dirfd, "hard", AT_SYMLINK_FOLLOW)
      st_after = lstat(dir .. "/file")
      st_hard = lstat(dir .. "/hard")
      st_soft = lstat(dir .. "/soft")
      expect(st_before.st_nlink + 1).to_be(st_after.st_nlink)
      expect(st_after.st_nlink).to_be(st_hard.st_nlink)
      expect(S_ISREG(st_hard.st_mode)).not_to_be(0)
      expect(S_ISLNK(st_hard.st_mode)).to_be(0)


- describe pathconf:
  - before:
      pathconf = M.pathconf

  - context with bad arguments:
      badargs.diagnose(pathconf, "(string, int)")

  - it returns whether chown can be used on the given file:
      expect(type(pathconf(".", M._PC_CHOWN_RESTRICTED))).to_be "number"
  - it fetches the maximum number of links to the given file:
      expect(type(pathconf(".", M._PC_LINK_MAX))).to_be "number"
  - it fetches the maximum formatted line input length for a tty:
      expect(type(pathconf(".", M._PC_MAX_CANON))).to_be "number"
  - it fetches the maximum raw line input length for a tty:
      expect(type(pathconf(".", M._PC_MAX_INPUT))).to_be "number"
  - it fetches the maximum filename length in this directory:
      expect(type(pathconf(".", M._PC_NAME_MAX))).to_be "number"
  - it fetches whether accessing overlong filenames is an error:
      expect(type(pathconf(".", M._PC_NO_TRUNC))).to_be "number"
  - it fetches the maximum relative path length from this directory:
      expect(type(pathconf(".", M._PC_PATH_MAX))).to_be "number"
  - it fetches the size of the pipe buffer:
      expect(type(pathconf(".", M._PC_PIPE_BUF))).to_be "number"
  - it fetches whether special character processing can be disabled:
      expect(type(pathconf(".", M._PC_VDISABLE))).to_be "number"


- describe readlink:
  - before:
      link, readlink = M.link, M.readlink

      dir = posix.mkdtemp(template)
      touch(dir .. "/file")
      link(dir .. "/file", dir .. "/soft", true)

  - after:
      rmtmp(dir)


  - context with bad arguments:
      badargs.diagnose(readlink, "(string)")

  - it diagnoses non-symlink path: |
      EINVAL = require "posix.errno".EINVAL
      expect({readlink(".")}).to_equal {nil, ".: not a symbolic link", EINVAL}

  - it returns the destination path of a symlink:
      expect(readlink(dir .. "/soft")).to_be(dir .. "/file")
  - it works on Linux /proc links:
      proclink = "/proc/self/fd/0"
      lstat = require "posix.sys.stat".lstat
      S_ISLNK = require "posix.sys.stat".S_ISLNK
      st_mode = (lstat(proclink) or {}).st_mode
      if st_mode and S_ISLNK(st_mode) then
         expect(readlink(proclink)).not_to_be(nil)
      end


- describe sysconf:
  - before:
      sysconf = M.sysconf

  - context with bad arguments:
      badargs.diagnose(sysconf, "(int)")

  - it fetches the maximum number of exec arguments:
      expect(type(sysconf(M._SC_ARG_MAX))).to_be "number"
  - it fetches the number processes per user:
      expect(type(sysconf(M._SC_CHILD_MAX))).to_be "number"
  - it fetches the number of clock ticks per second:
      expect(type(sysconf(M._SC_CLK_TCK))).to_be "number"
  - it fetches the job control version:
      expect(type(sysconf(M._SC_JOB_CONTROL))).to_be "number"
  - it fetches the maximum number of groups:
      expect(type(sysconf(M._SC_NGROUPS_MAX))).to_be "number"
  - it fetches the maximum number of open descriptors:
      expect(type(sysconf(M._SC_OPEN_MAX))).to_be "number"
  - it fetches the size of memory pages:
      expect(type(sysconf(M._SC_PAGESIZE))).to_be "number"
  - it fetches the number of saved ids:
      expect(type(sysconf(M._SC_SAVED_IDS))).to_be "number"
  - it fetches the maximum number of open streams:
      expect(type(sysconf(M._SC_STREAM_MAX))).to_be "number"
  - it fetches the maximum length of a timezone name:
      expect(type(sysconf(M._SC_TZNAME_MAX))).to_be "number"
  - it fetches the POSIX.1 version:
      expect(type(sysconf(M._SC_VERSION))).to_be "number"


- describe truncate:
  - before: |
      truncate = M.truncate

      function echo(fname, s)
         local fh = io.open(fname, 'w')
         fh:write(s .. '\n')
         fh:close()
         return #s + 1
      end

      function flen(fname)
         local fh = io.open(fname, 'r')
         local r = fh:read '*a'
         fh:close()
         return #r
      end

  - context with bad arguments:
      badargs.diagnose(truncate, "(string, int)")

  - it truncates a named file:
      fname = os.tmpname()
      len = echo(fname, 'line 1')
      echo(fname, 'line 2')
      expect(ftruncate(fname, len)).not_to_be(nil)
      expect(flen(fname)).to_be(len)
      os.remove(fname)


- describe ttyname:
  - before:
      ttyname, typeerrors = init(posix, "ttyname")
      r = pack(ttyname(2))

  - context with bad arguments:
    - 'it diagnoses argument #1 type not int or nil':
        expect(ttyname(false)).to_raise.any_of(typeerrors(1, "integer or nil", "boolean"))
    - 'it diagnoses argument #1 not a tty descriptor':
        expect(ttyname(-1)).to_be(nil)
    - it diagnoses too many arguments:
        expect(ttyname(1, false)).to_raise.any_of(typeerrors(2))

  - it returns nil and an error string:
      if r.n ~= 1 then
         expect(r[1]).to_be(nil)
         expect(type(r[2])).to_be "string"
      end
  - it returns a string:
      if r.n == 1 then
         expect(type(r[1])).to_be "string"
      end
  - it takes a file descriptor argument:
      if r.n == 1 then
         expect(r[1]).to_contain.any_of {"console", "pts", "tty"}
      end
  - it defaults the first argument to 0:
      expect(ttyname()).to_be(ttyname(0))

